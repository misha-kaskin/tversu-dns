package dao;

import handlers.Configs;
import models.Comment;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CommentDao {
    private static final String SQL_CREATE_TABLE = "CREATE TABLE IF NOT EXISTS comments (" +
            "id bigint generated by default as identity primary key," +
            "parent bigint," +
            "text varchar(300)," +
            "item_id bigint," +
            "item_type varchar(60)," +
            "author varchar(60)" +
            ");";

    private static final String SQL_ADD_COMMENT = "INSERT INTO comments(parent, text, item_id, item_type, author) " +
            "VALUES(?,?,?,?,?);";

    private static final String SQL_FIND_COMMENTS = "SELECT * FROM comments";

    public CommentDao() throws SQLException {
        Connection conn = DriverManager.getConnection(Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        Statement st = conn.createStatement();
        st.execute(SQL_CREATE_TABLE);
        st.close();
        conn.close();
    }

    public int addComment(Comment comment) throws SQLException {
        Connection conn = DriverManager.getConnection(Configs.DB_URL, Configs.DB_USER, Configs.DB_PASSWORD);
        PreparedStatement ps = conn.prepareStatement(SQL_ADD_COMMENT);

        ps.setInt(1, comment.getParent());
        ps.setString(2, comment.getText());
        ps.setInt(3, comment.getItemId());
        ps.setString(4, comment.getItemType());
        ps.setString(5, comment.getAuthor());

        int res = ps.executeUpdate();
        ps.close();
        conn.close();

        return res;
    }

    public List<Comment> findComments(String itemType, Integer itemId) throws SQLException {
        Connection conn = DriverManager.getConnection(Configs.DB_URL, Configs.DB_USER, Configs.DB_PASSWORD);
        Statement st = conn.createStatement();

        ResultSet rs = st.executeQuery(SQL_FIND_COMMENTS);
        List<Comment> comments = new ArrayList<>();

        while (rs.next()) {
            Comment comment = Comment.builder()
                    .author(rs.getString("author"))
                    .text(rs.getString("text"))
                    .id(rs.getInt("id"))
                    .itemType(rs.getString("item_type"))
                    .itemId(rs.getInt("item_id"))
                    .parent(rs.getInt("parent"))
                    .build();

            comments.add(comment);
        }

        List<Comment> result = new ArrayList<>();
        List<Comment> buffer = new ArrayList<>();
        Comment comment = new Comment();

        while (!comments.isEmpty()) {
            boolean isFindChild = false;
            int parentId;

            for (Comment comment1 : comments) {
                if (buffer.isEmpty()) {
                    parentId = -1;
                } else {
                    parentId = comment.getId();
                }

                if (comment1.getParent().equals(parentId)) {
                    result.add(comment1);
                    buffer.add(comment1);
                    comments.remove(comment1);

                    comment1.setLevel(buffer.size() - 1);
                    comment = comment1;
                    isFindChild = true;
                    break;
                }
            }

            if (!isFindChild) {
                if (!buffer.isEmpty()) {
                    buffer.remove(buffer.size() - 1);
                }

                if (!buffer.isEmpty()) {
                    comment = buffer.get(buffer.size() - 1);
                }
            }
        }

        return result;
    }
}
