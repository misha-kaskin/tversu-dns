package admin;

import java.sql.*;

public class UserDao {
    private static final String SQL_CREATE_TABLE = "CREATE TABLE IF NOT EXISTS users (" +
            "id bigint generated by default as identity primary key," +
            "login varchar(60)," +
            "password varchar(60)" +
            ");";

    private static final String SQL_CREATE_USER = "INSERT INTO users " +
            "(login, password)" +
            "VALUES" +
            "(?, ?)";

    private static final String SQL_DELETE_USER = "DELETE FROM users " +
            "WHERE login LIKE ?";

    private static final String SQL_GET_USER_BY_ID = "SELECT * " +
            "FROM users " +
            "WHERE login LIKE ?";

    private static final String SQL_UPDATE_USER_PASSWORD = "UPDATE users " +
            "SET password = ? " +
            "WHERE login LIKE ?";

    private static final String SQL_EXIST_BY_LOGIN_PASSWORD = "SELECT * " +
            "FROM users " +
            "WHERE login LIKE ? AND password LIKE ?";

    public UserDao() throws SQLException {
        Connection connection = DriverManager.getConnection(
                Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        Statement st = connection.createStatement();
        st.execute(SQL_CREATE_TABLE);
        st.close();
        connection.close();
    }

    public int createUser(User user) throws SQLException {
        Connection conn = DriverManager.getConnection(
                Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        PreparedStatement ps = conn.prepareStatement(SQL_CREATE_USER);
        ps.setString(1, user.getLogin());
        ps.setString(2, user.getPassword());

        int res = ps.executeUpdate();
        ps.close();
        conn.close();

        return res;
    }

    public User getUserById(String login) throws SQLException {
        Connection conn = DriverManager.getConnection(
                Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        PreparedStatement ps = conn.prepareStatement(SQL_GET_USER_BY_ID);
        ps.setString(1, login);

        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            User user = User.builder()
                    .login(rs.getString("login"))
                    .password(rs.getString("password"))
                    .build();

            ps.close();
            conn.close();

            return user;
        } else {
            ps.close();
            conn.close();
            throw new RuntimeException("Пользователь не найден");
        }
    }

    public int deleteUserById(String login) throws SQLException {
        Connection conn = DriverManager.getConnection(
                Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        PreparedStatement ps = conn.prepareStatement(SQL_DELETE_USER);
        ps.setString(1, login);

        int res = ps.executeUpdate();
        ps.close();
        conn.close();

        return res;
    }

    public int updateUserById(User user) throws SQLException {
        Connection conn = DriverManager.getConnection(
                Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        PreparedStatement ps = conn.prepareStatement(SQL_UPDATE_USER_PASSWORD);
        ps.setString(1, user.getPassword());
        ps.setString(2, user.getLogin());

        int res = ps.executeUpdate();
        ps.close();
        conn.close();

        return res;
    }

    public boolean existByLoginPassword(User user) throws SQLException {
        Connection conn = DriverManager.getConnection(
                Configs.DB_URL,
                Configs.DB_USER,
                Configs.DB_PASSWORD
        );

        PreparedStatement ps = conn.prepareStatement(SQL_EXIST_BY_LOGIN_PASSWORD);
        ps.setString(1, user.getLogin());
        ps.setString(2, user.getPassword());

        ResultSet rs = ps.executeQuery();

        boolean res = rs.next();
        ps.close();
        conn.close();

        return res;
    }
}
